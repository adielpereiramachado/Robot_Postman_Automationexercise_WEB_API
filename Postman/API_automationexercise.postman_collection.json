{
	"info": {
		"_postman_id": "07e7c167-1089-452b-9007-ad4d5bf6a776",
		"name": "API_automationexercise",
		"description": "Site servidor da API: [https://automationexercise.com](https://automationexercise.com)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38851003"
	},
	"item": [
		{
			"name": "automationexercise",
			"item": [
				{
					"name": "1: Get All Products List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Testa o formato do retorno\r",
									"pm.test(\"Verifica se o formato da resposta é igual ao esperado\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.products).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"products\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"price\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"brand\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"category\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"usertype\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"usertype\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"usertype\"\r",
									"                  ]\r",
									"                },\r",
									"                \"category\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"usertype\",\r",
									"                \"category\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"price\",\r",
									"            \"brand\",\r",
									"            \"category\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"products\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/productsList",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "2: POST To All Products List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(405);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o texto esperado\r",
									"pm.test(\"Verifica se no campo message de retorno tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"This request method is not supported.\");\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/productsList",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"productsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "3: Get All Brands List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"brands\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"brand\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"brand\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"brands\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"\r",
									"// Testa se dentro do json de retorno vem somente valor esperado\r",
									"pm.test(\"Verifica se no json de retorno, tem os campos esperados\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody).to.have.property('brands');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/brandsList",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "4: PUT To All Brands List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(405);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo message de retorno tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"This request method is not supported.\");\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/brandsList",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"brandsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "11: POST To Create/Register User Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Obtem valores\r",
									"const nomeField = pm.request.body.formdata.members.find(item => item.key === \"name\");\r",
									"const nome = nomeField.value;\r",
									"pm.globals.unset(\"NOME\");\r",
									"pm.globals.set(\"NOME\", nome);\r",
									"\r",
									"const emailField = pm.request.body.formdata.members.find(item => item.key === \"email\");\r",
									"const email = emailField.value;\r",
									"pm.globals.unset(\"EMAIL\");\r",
									"pm.globals.set(\"EMAIL\", email);\r",
									"\r",
									"const SENHAField = pm.request.body.formdata.members.find(item => item.key === \"password\");\r",
									"const SENHA = SENHAField.value;\r",
									"pm.globals.unset(\"SENHA\");\r",
									"pm.globals.set(\"SENHA\", SENHA);\r",
									"\r",
									"const TITULOField = pm.request.body.formdata.members.find(item => item.key === \"title\");\r",
									"const TITULO = TITULOField.value;\r",
									"pm.globals.unset(\"TITULO\");\r",
									"pm.globals.set(\"TITULO\", TITULO);\r",
									"\r",
									"const DATA_ANIVERSARIOField = pm.request.body.formdata.members.find(item => item.key === \"birth_date\");\r",
									"const DATA_ANIVERSARIO = DATA_ANIVERSARIOField.value;\r",
									"pm.globals.unset(\"DATA_ANIVERSARIO\");\r",
									"pm.globals.set(\"DATA_ANIVERSARIO\", DATA_ANIVERSARIO);\r",
									"\r",
									"const MES_ANIVERSARIOField = pm.request.body.formdata.members.find(item => item.key === \"birth_month\");\r",
									"const MES_ANIVERSARIO = MES_ANIVERSARIOField.value;\r",
									"pm.globals.unset(\"MES_ANIVERSARIO\");\r",
									"pm.globals.set(\"MES_ANIVERSARIO\", MES_ANIVERSARIO);\r",
									"\r",
									"const ANO_ANIVERSARIOField = pm.request.body.formdata.members.find(item => item.key === \"birth_year\");\r",
									"const ANO_ANIVERSARIO = ANO_ANIVERSARIOField.value;\r",
									"pm.globals.unset(\"ANO_ANIVERSARIO\");\r",
									"pm.globals.set(\"ANO_ANIVERSARIO\", ANO_ANIVERSARIO);\r",
									"\r",
									"const PRIMEIRO_NOMEField = pm.request.body.formdata.members.find(item => item.key === \"firstname\");\r",
									"const PRIMEIRO_NOME = PRIMEIRO_NOMEField.value;\r",
									"pm.globals.unset(\"PRIMEIRO_NOME\");\r",
									"pm.globals.set(\"PRIMEIRO_NOME\", PRIMEIRO_NOME);\r",
									"\r",
									"const SOBRE_NOMEField = pm.request.body.formdata.members.find(item => item.key === \"lastname\");\r",
									"const SOBRE_NOME = SOBRE_NOMEField.value;\r",
									"pm.globals.unset(\"SOBRE_NOME\");\r",
									"pm.globals.set(\"SOBRE_NOME\", SOBRE_NOME);\r",
									"\r",
									"const EMPRESAField = pm.request.body.formdata.members.find(item => item.key === \"company\");\r",
									"const EMPRESA = EMPRESAField.value;\r",
									"pm.globals.unset(\"EMPRESA\");\r",
									"pm.globals.set(\"EMPRESA\", EMPRESA);\r",
									"\r",
									"const ENDERECO1Field = pm.request.body.formdata.members.find(item => item.key === \"address1\");\r",
									"const ENDERECO1 = ENDERECO1Field.value;\r",
									"pm.globals.unset(\"ENDERECO1\");\r",
									"pm.globals.set(\"ENDERECO1\", ENDERECO1);\r",
									"\r",
									"const ENDERECO2Field = pm.request.body.formdata.members.find(item => item.key === \"address2\");\r",
									"const ENDERECO2 = ENDERECO2Field.value;\r",
									"pm.globals.unset(\"ENDERECO2\");\r",
									"pm.globals.set(\"ENDERECO2\", ENDERECO2);\r",
									"\r",
									"const PAISField = pm.request.body.formdata.members.find(item => item.key === \"country\");\r",
									"const PAIS = PAISField.value;\r",
									"pm.globals.unset(\"PAIS\");\r",
									"pm.globals.set(\"PAIS\", PAIS);\r",
									"\r",
									"const CEPField = pm.request.body.formdata.members.find(item => item.key === \"zipcode\");\r",
									"const CEP = CEPField.value;\r",
									"pm.globals.unset(\"CEP\");\r",
									"pm.globals.set(\"CEP\", CEP);\r",
									"\r",
									"const ESTADOField = pm.request.body.formdata.members.find(item => item.key === \"state\");\r",
									"const ESTADO = ESTADOField.value;\r",
									"pm.globals.unset(\"ESTADO\");\r",
									"pm.globals.set(\"ESTADO\", ESTADO);\r",
									"\r",
									"const CIDADEField = pm.request.body.formdata.members.find(item => item.key === \"city\");\r",
									"const CIDADE = CIDADEField.value;\r",
									"pm.globals.unset(\"CIDADE\");\r",
									"pm.globals.set(\"CIDADE\", CIDADE);\r",
									"\r",
									"const CELULARField = pm.request.body.formdata.members.find(item => item.key === \"mobile_number\");\r",
									"const CELULAR = CELULARField.value;\r",
									"pm.globals.unset(\"CELULAR\");\r",
									"pm.globals.set(\"CELULAR\", CELULAR);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Testa se o status code é 200\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retonro tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo message de retonro tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"User created!\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Testa se o schema é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"//Segunda tentativa de pegar ID\r",
									"\r",
									"// código de estudo para pegar o valor do id e jogar em uma variavel\r",
									"// Envia uma requisição GET para obter os detalhes do usuário com base no email\r",
									"pm.sendRequest({\r",
									"    url: 'https://automationexercise.com/api/getUserDetailByEmail?email=teste202410041448@teste.com',\r",
									"    method: 'GET'\r",
									"}, function (err, response) {\r",
									"    if (err) {\r",
									"        console.log(\"Erro ao fazer a requisição:\", err);\r",
									"    } else {\r",
									"        // Converte a resposta para JSON\r",
									"        let jsonResponse = response.json();\r",
									"        \r",
									"        // Verifica se o campo 'user' existe na resposta e se contém o campo 'id'\r",
									"        if (jsonResponse.user && jsonResponse.user.id) {\r",
									"            let userId = jsonResponse.user.id;\r",
									"            \r",
									"            // Armazena o valor do 'id' em uma variável global chamada 'VAR_ID'\r",
									"            pm.globals.set(\"VAR_ID\", userId);\r",
									"            \r",
									"            // Exibe no console o valor atribuído\r",
									"            console.log(\"O ID do usuário foi salvo na variável global VAR_ID:\", userId);\r",
									"        } else {\r",
									"            console.log(\"O campo 'user' ou 'id' não foi encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// //\r",
									"// // Obtem ID da requisição\r",
									"// pm.sendRequest({\r",
									"//     url: 'https://automationexercise.com/api/getUserDetailByEmail?email=teste202410041448@teste.com',\r",
									"//     method: 'GET',\r",
									"// }, function (err, response) {\r",
									"//     if (err) {\r",
									"//         console.log(\"Erro ao fazer a requisição:\", err);\r",
									"//     } else {\r",
									"//         const jsonResponse = response.json();\r",
									"//         var RESPOSTA_GET   = response.json();\r",
									"//         // Exibe a resposta da requisição no console\r",
									"//         console.log(\"Resposta da requisição GET:\", jsonResponse);\r",
									"//         console.log(\"Resposta da requisição GET ok ok:\", RESPOSTA_GET);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//         // Você pode acessar e manipular os dados da resposta aqui\r",
									"//         // Exemplo: captura o campo 'id' da resposta se existir\r",
									"//         if (jsonResponse && jsonResponse.id) {\r",
									"//             const userId = jsonResponse.id;\r",
									"//             console.log(\"ID do usuário:\", userId);\r",
									"//             // Armazena o ID em uma variável de ambiente ou global\r",
									"//             pm.environment.set(\"USER_ID\", userId);\r",
									"//         }\r",
									"//     }\r",
									"// });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Nome b",
									"type": "text"
								},
								{
									"key": "email",
									"value": "teste202410041448@teste.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234567890",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "1",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "1",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1977",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Nome 1",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Sobre nome",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Empresa",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "Rua dos bobo",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "",
									"type": "text"
								},
								{
									"key": "country",
									"value": "India",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "11111111",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Estado",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Cidade",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "999999999",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/createAccount",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"createAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "13: PUT METHOD To Update User Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retonro tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo message de retonro tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"User updated!\");\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"\r",
									"// Obtem valore do novo nome\r",
									"const novo_nomeField = pm.request.body.formdata.members.find(item => item.key === \"name\");\r",
									"const novo_nome = novo_nomeField.value;\r",
									"pm.globals.unset(\"NOVO_NOME\");\r",
									"pm.globals.set(\"NOVO_NOME\", novo_nome);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Novo nomes",
									"type": "text"
								},
								{
									"key": "email",
									"value": "teste202410041448@teste.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234567890",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "1",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "1",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1977",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Nome 1",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Sobre nome",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Empresa",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "Rua dos bobo",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "",
									"type": "text"
								},
								{
									"key": "country",
									"value": "India",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "11111111",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Estado",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Cidade",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "112233445566",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/updateAccount",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"updateAccount"
							]
						}
					},
					"response": []
				},
				{
					"name": "5: POST To Search Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retonro tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"products\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"price\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"brand\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"category\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"usertype\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"usertype\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"usertype\"\r",
									"                  ]\r",
									"                },\r",
									"                \"category\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"usertype\",\r",
									"                \"category\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"price\",\r",
									"            \"brand\",\r",
									"            \"category\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"products\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"\r",
									"// Testa se dentro de um campo vem somente o texto esperado\r",
									"pm.test(\"Verifica se dentro de um campo de retorno vem somente o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();     \r",
									"     responseBody.products.forEach((product) => {\r",
									"            pm.expect(product).to.have.property('category');\r",
									"            pm.expect(product.category).to.be.an('object');\r",
									"            pm.expect(product.category.category).to.equal('Tshirts');\r",
									"     });\r",
									"     \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "search_product",
									"value": "tshirt",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/searchProduct",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"searchProduct"
							]
						}
					},
					"response": []
				},
				{
					"name": "6: POST To Search Product without search_product parameter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o texto esperado\r",
									"pm.test(\"Verifica se no campo message de retorno tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"Bad request, search_product parameter is missing in POST request.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{BASE_URL}}/searchProduct",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"searchProduct"
							]
						}
					},
					"response": []
				},
				{
					"name": "7: POST To Verify Login with valid details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(200);\r",
									"});\r",
									"\r",
									"// Testa se na mensagem de retorno tem o texto esperado\r",
									"pm.test(\"Verifica se no campo message de retorno tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"User exists!\");\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "teste202410041448@teste.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234567890",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/verifyLogin",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "8: POST To Verify Login without email parameter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o texto esperado\r",
									"pm.test(\"Verifica se no campo message de retorno tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"Bad request, email or password parameter is missing in POST request.\");\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"value": "tshirt",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234567890",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/verifyLogin",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "9: DELETE To Verify Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(405);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o texto esperado\r",
									"pm.test(\"Verifica se no campo message de retorno tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"This request method is not supported.\");\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/verifyLogin",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "10: POST To Verify Login with invalid details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o texto esperado\r",
									"pm.test(\"Verifica se no campo message de retorno tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"User not found!\");\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"value": "tshirt",
									"type": "text"
								},
								{
									"key": "email",
									"value": "usuarioinexistente@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234567890",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/verifyLogin",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"verifyLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "14: GET user account detail by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retonro tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(200);\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"birth_day\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"birth_month\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"birth_year\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"first_name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"last_name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"company\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"city\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"zipcode\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"email\",\r",
									"        \"title\",\r",
									"        \"birth_day\",\r",
									"        \"birth_month\",\r",
									"        \"birth_year\",\r",
									"        \"first_name\",\r",
									"        \"last_name\",\r",
									"        \"company\",\r",
									"        \"address1\",\r",
									"        \"address2\",\r",
									"        \"country\",\r",
									"        \"state\",\r",
									"        \"city\",\r",
									"        \"zipcode\"\r",
									"        // Me parece um erro não trazer o campo mobile_number\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"user\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"let VAR_ID = pm.globals.get(\"VAR_ID\");\r",
									"let NOVO_NOME = pm.globals.get(\"NOVO_NOME\");\r",
									"let EMAIL = pm.globals.get(\"EMAIL\");\r",
									"let SENHA = pm.globals.get(\"SENHA\");\r",
									"let TITULO = pm.globals.get(\"TITULO\");\r",
									"let DATA_ANIVERSARIO = pm.globals.get(\"DATA_ANIVERSARIO\");\r",
									"let MES_ANIVERSARIO = pm.globals.get(\"MES_ANIVERSARIO\");\r",
									"let ANO_ANIVERSARIO = pm.globals.get(\"ANO_ANIVERSARIO\");\r",
									"let PRIMEIRO_NOME = pm.globals.get(\"PRIMEIRO_NOME\");\r",
									"let SOBRE_NOME = pm.globals.get(\"SOBRE_NOME\");\r",
									"let EMPRESA = pm.globals.get(\"EMPRESA\");\r",
									"let ENDERECO1 = pm.globals.get(\"ENDERECO1\");\r",
									"let ENDERECO2 = pm.globals.get(\"ENDERECO2\");\r",
									"let PAIS = pm.globals.get(\"PAIS\");\r",
									"let CEP = pm.globals.get(\"CEP\");\r",
									"let ESTADO = pm.globals.get(\"ESTADO\");\r",
									"let CIDADE = pm.globals.get(\"CIDADE\");\r",
									"let CELULAR = pm.globals.get(\"CELULAR\");\r",
									"// console.log(\"O valor da mobile_number é:\", CELULAR);\r",
									"\r",
									"\r",
									"// Testa se dentro de um campo vem somente o texto esperado\r",
									"pm.test(\"Verifica se no retorno existe os valores esperados do usuario solicitado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.user).to.have.property('name').and.to.equal(NOVO_NOME);\r",
									"     pm.expect(responseBody.user).to.have.property('id').and.to.equal(VAR_ID);\r",
									"     pm.expect(responseBody.user).to.have.property('email').and.to.equal(EMAIL);\r",
									"     pm.expect(responseBody.user).to.have.property('title').and.to.equal(TITULO);\r",
									"     pm.expect(responseBody.user).to.have.property('birth_day').and.to.equal(DATA_ANIVERSARIO);\r",
									"     pm.expect(responseBody.user).to.have.property('birth_month').and.to.equal(MES_ANIVERSARIO);\r",
									"     pm.expect(responseBody.user).to.have.property('birth_year').and.to.equal(ANO_ANIVERSARIO);\r",
									"     pm.expect(responseBody.user).to.have.property('first_name').and.to.equal(PRIMEIRO_NOME);\r",
									"     pm.expect(responseBody.user).to.have.property('last_name').and.to.equal(SOBRE_NOME);\r",
									"     pm.expect(responseBody.user).to.have.property('company').and.to.equal(EMPRESA);\r",
									"     pm.expect(responseBody.user).to.have.property('address1').and.to.equal(ENDERECO1);\r",
									"     pm.expect(responseBody.user).to.have.property('address2').and.to.equal(ENDERECO2);\r",
									"     pm.expect(responseBody.user).to.have.property('country').and.to.equal(PAIS);\r",
									"     pm.expect(responseBody.user).to.have.property('zipcode').and.to.equal(CEP);\r",
									"     pm.expect(responseBody.user).to.have.property('state').and.to.equal(ESTADO);\r",
									"     pm.expect(responseBody.user).to.have.property('city').and.to.equal(CIDADE);\r",
									"     //pm.expect(responseBody.user).to.have.property('mobile_number').and.to.equal(CELULAR);  // Me parece um erro não trazer mobile_number/CELULAR\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// // código de estudo para pegar o valor do id e jogar em uma variavel\r",
									"// // Primeiro, garante que a resposta seja um JSON válido\r",
									"// let jsonResponse = pm.response.json();\r",
									"\r",
									"// // Verifica se o campo 'user' existe na resposta e se contém o campo 'id'\r",
									"// if (jsonResponse.user && jsonResponse.user.id) {\r",
									"//     let userId = jsonResponse.user.id;\r",
									"\r",
									"//     // Armazena o valor do 'id' em uma variável global chamada 'VAR_ID'\r",
									"//     pm.globals.set(\"VAR_ID\", userId);\r",
									"\r",
									"//     // Exibe no console o valor atribuído\r",
									"//     console.log(\"O ID do usuário foi salvo na variável global VAR_ID:\", userId);\r",
									"// } else {\r",
									"//     console.log(\"O campo 'user' ou 'id' não foi encontrado na resposta.\");\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/getUserDetailByEmail?email={{EMAIL}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "{{EMAIL}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "12: DELETE METHOD To Delete User Account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testa o response\r",
									"pm.test(\"Verifica Response Code de envio\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o ResponseCode esperado\r",
									"pm.test(\"Verifica se no campo responseCode de retorno tem o valor esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.responseCode).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se na mensagem de retorno tem o texto esperado\r",
									"pm.test(\"Verifica se no campo message de retorno tem o texto esperado\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody.message).to.equal(\"Account deleted!\");\r",
									"});\r",
									"\r",
									"\r",
									"// Testa se o schema/contrato é válido\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"// Defina o schema JSON que deseja validar\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"responseCode\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"responseCode\",\r",
									"    \"message\"\r",
									"  ]\r",
									"};\r",
									"// Obtenha os dados da resposta da API\r",
									"const dados = pm.response.json();\r",
									"// Valide o schema usando Ajv\r",
									"const validate = ajv.compile(schema);\r",
									"const valid = validate(dados);\r",
									"// Exibe o resultado da validação no console\r",
									"if (!valid) {\r",
									"    console.log(\"Erro de schema:\", validate.errors);\r",
									"}\r",
									"pm.test(\"Verifica se o schema/contrato da resposta está correto\", function () {\r",
									"    pm.expect(valid).to.be.true;});\r",
									"\r",
									"\r",
									"//Limpa variavel global\r",
									"pm.globals.unset(\"NOME\");\r",
									"pm.globals.unset(\"NOVO_NOME\");\r",
									"pm.globals.unset(\"EMAIL\");\r",
									"pm.globals.unset(\"SENHA\");\r",
									"pm.globals.unset(\"TITULO\");\r",
									"pm.globals.unset(\"DATA_ANIVERSARIO\");\r",
									"pm.globals.unset(\"MES_ANIVERSARIO\");\r",
									"pm.globals.unset(\"ANO_ANIVERSARIO\");\r",
									"pm.globals.unset(\"PRIMEIRO_NOME\");\r",
									"pm.globals.unset(\"SOBRE_NOME\");\r",
									"pm.globals.unset(\"EMPRESA\");\r",
									"pm.globals.unset(\"ENDERECO1\");\r",
									"pm.globals.unset(\"ENDERECO2\");\r",
									"pm.globals.unset(\"PAIS\");\r",
									"pm.globals.unset(\"CEP\");\r",
									"pm.globals.unset(\"ESTADO\");\r",
									"pm.globals.unset(\"CIDADE\");\r",
									"pm.globals.unset(\"CELULAR\");\r",
									"pm.globals.unset(\"VAR_ID\");\r",
									"console.log(\"Variaveis globais com dados de criação deletados.\")\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{EMAIL}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{SENHA}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/deleteAccount",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"deleteAccount"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}